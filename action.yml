name: "Documentation generation"
description: "Generates API documentation for your Lean project"
inputs:
  blueprint:
    description: Set to true to build a blueprint alongside your documentation.
    required: false
    default: "false"
  build_args:
    description: |
      This GitHub Action uses leanprover/lean-action to build and test the repository.
      This parameter determines what to pass to the build-args argument of leanprover/lean-action.
    required: false
    default: "--log-level=warning"
  lake_package_directory:
    description: |
      The directory containing the Lake package to build.
      This parameter is passed to the lake-package-directory argument of leanprover/lean-action.
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - name: Checkout project
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0 # Fetch all history for all branches and tags

    - name: Parse the project metadata.
      id: determine-project-metadata
      run: node "${{ github.action_path }}/dist/index.js"
      shell: bash
      working-directory: ${{ inputs.lake_package_directory }}

    - name: Build and lint the project.
      id: build-lean
      uses: leanprover/lean-action@f807b338d95de7813c5c50d018f1c23c9b93b4ec # v1.2.0
      with:
        build-args: ${{ inputs.build_args }}
        lake-package-directory: ${{ inputs.lake_package_directory }}

    - name: check that the file importing all is up to date
      run: ~/.elan/bin/lake exe mk_all --check
      shell: bash

    - name: Cache Mathlib docs
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        # TODO: dynamically determine the list of dependencies based on the manifest.
        path: |
          docbuild/.lake/build/doc/Aesop
          docbuild/.lake/build/doc/Batteries
          docbuild/.lake/build/doc/find
          docbuild/.lake/build/doc/Init
          docbuild/.lake/build/doc/Lake
          docbuild/.lake/build/doc/Lean
          docbuild/.lake/build/doc/Mathlib
          docbuild/.lake/build/doc/Std
        key: Docs-${{ hashFiles('lake-manifest.json') }}

    - name: Check for `docs` folder # this is meant to detect a Jekyll-based website
      id: check_docs
      run: |
        if [ -d docs ]; then
          echo "The 'docs' folder exists in the repository."
          echo "DOCS_EXISTS=true" >> $GITHUB_ENV
        else
          echo "The 'docs' folder does not exist in the repository."
          echo "DOCS_EXISTS=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build blueprint and copy to `docs/blueprint`
      if: inputs.blueprint == 'true'
      uses: xu-cheng/texlive-action@f886de8159e5952a131848a5fa9c3196a2132b5d # v2
      with:
        docker_image: ghcr.io/xu-cheng/texlive-full:20250401
        run: |
          # Install necessary dependencies and build the blueprint
          apk update
          apk add --update make py3-pip git pkgconfig graphviz graphviz-dev gcc musl-dev
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global --add safe.directory `pwd`
          python3 -m venv env
          source env/bin/activate
          pip install --upgrade pip requests wheel
          pip install pygraphviz --global-option=build_ext --global-option="-L/usr/lib/graphviz/" --global-option="-R/usr/lib/graphviz/"
          pip install leanblueprint
          leanblueprint pdf
          mkdir -p docs
          cp blueprint/print/print.pdf docs/blueprint.pdf
          leanblueprint web
          cp -r blueprint/web docs/blueprint

    - name: Check declarations mentioned in the blueprint exist in Lean code
      if: inputs.blueprint == 'true'
      run: ~/.elan/bin/lake exe checkdecls blueprint/lean_decls
      shell: bash

    - name: Build project API documentation
      if: github.event_name == 'push'
      run: scripts/build_docs.sh
      shell: bash
      env:
        NAME: ${{ steps.determine-project-metadata.outputs.name }}
        DOCS_FACETS: ${{ steps.determine-project-metadata.outputs.docs_facets }}

    - name: Bundle dependencies
      if: github.event_name == 'push'
      uses: ruby/setup-ruby@eaecf785f6a34567a6d97f686bbb7bccc1ac1e5c # v1.237.0
      with:
        working-directory: docs
        ruby-version: "3.1" # Specify Ruby version
        bundler-cache: true # Enable caching for bundler

    - name: Build website using Jekyll
      if: github.event_name == 'push' && env.DOCS_EXISTS == 'true'
      working-directory: docs
      env:
        JEKYLL_GITHUB_TOKEN: ${{ github.token }}
      run: JEKYLL_ENV=production bundle exec jekyll build # Note this will also copy the blueprint and API doc into docs/_site
      shell: bash

    - name: "Upload website (API documentation, blueprint and any home page)"
      if: github.event_name == 'push'
      uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
      with:
        path: ${{ env.DOCS_EXISTS == 'true' && 'docs/_site' || 'docs/' }}

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push'
      id: deployment
      uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

